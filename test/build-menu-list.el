(require 'ctxmenu)
(require 'el-expectations)

(expectations
  (desc "build-menu-list call ctxmenu::get-apropos-commands with default delimiter")
  (expect (mock (ctxmenu::get-apropos-commands "\\`test\\+[^a-zA-Z0-9]+\\([a-zA-Z0-9]?\\)"))
    (setq ctxmenu::hash-menu-list (make-hash-table :test 'equal))
    (ctxmenu::build-menu-list '(((prefix . "test+")))))
  (desc "build-menu-list call ctxmenu::get-apropos-commands with delimiter")
  (expect (mock (ctxmenu::get-apropos-commands "\\`test\\+-\\([a-zA-Z0-9]?\\)"))
    (setq ctxmenu::hash-menu-list (make-hash-table :test 'equal))
    (ctxmenu::build-menu-list '(((prefix . "test+")
                                 (delimiter . "-")))))
  (desc "build-menu-list call ctxmenu::get-apropos-commands as regexp")
  (expect (mock (ctxmenu::get-apropos-commands "test+-\\([a-zA-Z0-9]?\\)"))
    (setq ctxmenu::hash-menu-list (make-hash-table :test 'equal))
    (ctxmenu::build-menu-list '(((prefix . "test+")
                                 (delimiter . "-")
                                 (is-regexp . t)))))
  (desc "build-menu-list call ctxmenu::get-binding-commands")
  (expect (mock (ctxmenu::get-binding-commands "C-x RET"))
    (setq ctxmenu::hash-menu-list (make-hash-table :test 'equal))
    (ctxmenu::build-menu-list '(((prefix . "test+")
                                 (keystroke . "C-x RET")))))
  (desc "build-menu-list use ctxmenu:sources")
  (expect (mock (ctxmenu::get-binding-commands "C-x RET"))
    (setq ctxmenu::hash-menu-list (make-hash-table :test 'equal))
    (let ((ctxmenu:sources '(((prefix . "test+")
                              (keystroke . "C-x RET"))))
          (ctxmenu:global-sources))
      (ctxmenu::build-menu-list)))
  (desc "build-menu-list use ctxmenu:global-sources")
  (expect (mock (ctxmenu::get-binding-commands "C-x RET"))
    (setq ctxmenu::hash-menu-list (make-hash-table :test 'equal))
    (let ((ctxmenu:sources)
          (ctxmenu:global-sources '(((prefix . "test+")
                                     (keystroke . "C-x RET")))))
      (ctxmenu::build-menu-list)))
  (desc "build-menu-list call menu list function in default")
  (expect (mock (ctxmenu:menu-list-flat '(forward-char) 'ctxmenu:sort-menu-hoge))
    (setq ctxmenu::hash-menu-list (make-hash-table :test 'equal))
    (let ((ctxmenu:default-menu-list-function 'ctxmenu:menu-list-flat)
          (ctxmenu:default-sort-menu-function 'ctxmenu:sort-menu-hoge))
      (stub ctxmenu::get-apropos-commands => '(forward-char))
      (ctxmenu::build-menu-list '(((prefix . "test+"))))))
  (desc "build-menu-list call menu list function in custom")
  (expect (mock (ctxmenu:menu-list-simple-cascade '(forward-char) 'ctxmenu:sort-menu-fuga))
    (setq ctxmenu::hash-menu-list (make-hash-table :test 'equal))
    (let ((ctxmenu:default-menu-list-function 'ctxmenu:menu-list-flat)
          (ctxmenu:default-sort-menu-function 'ctxmenu:sort-menu-hoge))
      (stub ctxmenu::get-apropos-commands => '(forward-char))
      (ctxmenu::build-menu-list '(((prefix . "test+")
                                   (menu-list . ctxmenu:menu-list-simple-cascade)
                                   (sort . ctxmenu:sort-menu-fuga))))))
  (desc "build-menu-list build")
  (expect '(("Forward" #("Char" 0 1 (value forward-char document ctxmenu::get-menu-help))))
    (setq ctxmenu::hash-menu-list (make-hash-table :test 'equal))
    (let ((ctxmenu:default-menu-list-function 'ctxmenu:menu-list-flat)
          (ctxmenu:default-sort-menu-function 'ctxmenu:sort-menu-default))
      (ctxmenu::build-menu-list '(((prefix . "forward")
                                   (delimiter . "-")
                                   (include-regexp . "\\`forward-char\\'"))))))
  (desc "build-menu-list build with menu-name")
  (expect '(("BackWard" #("Char" 0 1 (value forward-char document ctxmenu::get-menu-help))))
    (setq ctxmenu::hash-menu-list (make-hash-table :test 'equal))
    (let ((ctxmenu:default-menu-list-function 'ctxmenu:menu-list-flat)
          (ctxmenu:default-sort-menu-function 'ctxmenu:sort-menu-default))
      (ctxmenu::build-menu-list '(((prefix . "forward")
                                   (delimiter . "-")
                                   (menu-name . "BackWard")
                                   (include-regexp . "\\`forward-char\\'"))))))
  (desc "build-menu-list build with remain-prefix")
  (expect '(("Forward" #("Forward Char" 0 1 (value forward-char document ctxmenu::get-menu-help))))
    (setq ctxmenu::hash-menu-list (make-hash-table :test 'equal))
    (let ((ctxmenu:default-menu-list-function 'ctxmenu:menu-list-flat)
          (ctxmenu:default-sort-menu-function 'ctxmenu:sort-menu-default))
      (ctxmenu::build-menu-list '(((prefix . "forward")
                                   (delimiter . "-")
                                   (remain-prefix . t)
                                   (include-regexp . "\\`forward-char\\'"))))))
  (desc "build-menu-list build use cache")
  (expect '(("Forward" #("Forward Char" 0 1 (value forward-char document ctxmenu::get-menu-help))))
    (let ((ctxmenu:default-menu-list-function 'ctxmenu:menu-list-flat)
          (ctxmenu:default-sort-menu-function 'ctxmenu:sort-menu-default))
      (stub ctxmenu:menu-list-flat => nil)
      (ctxmenu::build-menu-list '(((prefix . "forward")
                                   (delimiter . "-")
                                   (remain-prefix . t)
                                   (include-regexp . "\\`forward-char\\'"))))))
  )

